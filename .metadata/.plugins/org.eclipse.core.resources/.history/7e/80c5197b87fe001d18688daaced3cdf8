package controllers;

import java.time.LocalDate;
import java.util.List;

import model.Administrador;
import model.Buses;
import model.Camiones;
import model.Cliente;
import model.ConcesiorarioUQ;
import model.Deportivo;
import model.Empleado;
import model.Estado;
import model.Motos;
import model.Pickups;
import model.Sedan;
import model.Suv;
import model.TipoCamion;
import model.TipoCombustible;
import model.TipoTransmision;
import model.TipoVehiculo;
import model.Vans;
import model.Vehiculo;



public class Singleton {
	ConcesiorarioUQ concesionario = null;

	private static class SingletonHolder {
		// El constructor de Singleton puede ser llamado desde aquí al ser
		// protected
		private final static Singleton eINSTANCE = new Singleton();
	}

	public static Singleton getInstance() {
		return SingletonHolder.eINSTANCE;
	}

	public Singleton(){
			inicializarDatos();
		}

	private void inicializarDatos() {
		concesionario = new ConcesiorarioUQ();

		Administrador admin = new Administrador("Santiago", "Orozco", "1021804899", "899");
		concesionario.getListaAdministradores().add(admin);

		Empleado empleado = new Empleado("Pepe", "Grillo", "804");
		concesionario.getListaEmpleados().add(empleado);


	}

	public ConcesiorarioUQ getConcesionario() {
		return concesionario;
	}

	public void setConcesionario(ConcesiorarioUQ concesionario) {
		this.concesionario = concesionario;
	}

	public boolean verificarAdmin(String password) {
		return concesionario.verificarAdmin(password);
	}

	public boolean verificarEmpleado(String name, String password) {
		return concesionario.verificarEmpleado(name,password);
	}

	public boolean crearCliente(String nombre, String apellidos, String cedula, LocalDate fechaNacimiento) {
		boolean flag = concesionario.crearCliente(nombre, apellidos, cedula, fechaNacimiento);
		return flag;
	}

	public List<Cliente> getListaClientes() {
		List<Cliente> listaClientes = concesionario.getListaClientes();

		return listaClientes;
	}

	public boolean eliminarCliente(Cliente clienteSeleccion) {
		boolean flag = concesionario.eliminarCliente(clienteSeleccion);
		return flag;
	}

	public boolean crearBus(String marca, String modelo, String cambios, String velocidadMax, String cilindraje,
			boolean aireAcon, boolean camReversa, boolean abs, String numPasajeros, String numPuertas, String capacidadMaletero, String bolsasAire, String numEjes,
			String salidasEmergencia, TipoCombustible combustible, TipoTransmision transmision, Estado estado) {

		Vehiculo bus =

		boolean flag = concesionario.crearVehiculo(bus);
		return flag;
	}

	public boolean crearCamion(String marcaCa, String modeloCa, String cambiosCa, String velocidadMaxCa,
			String cilindrajeCa, TipoCombustible combustibleCa, TipoTransmision transmisionCa, Estado estadoCa,
			boolean absCa, boolean aireAconCa, String capacidadCarga, TipoCamion tipoCamion, boolean frenoAire,
			String numEjesCa) {

		Vehiculo Camion = new Camiones(marcaCa, modeloCa, cambiosCa, velocidadMaxCa, cilindrajeCa, capacidadCarga, aireAconCa, absCa,
				frenoAire, numEjesCa, tipoCamion, transmisionCa, combustibleCa, estadoCa);

		boolean flag = concesionario.crearVehiculo(Camion);
		return flag;
	}

	public boolean crearDeportivo(String marcaCa, String modeloCa, String cambiosCa, String velocidadMaxCa,
			String cilindrajeCa, TipoCombustible combustibleCa, TipoTransmision transmisionCa, Estado estadoCa,
			String numPasajerosDe, String numPuertasDe, String numBolsasAire, String hp, String aceleracion) {

		Vehiculo deportivo = new Deportivo(marcaCa, modeloCa, cambiosCa, velocidadMaxCa, cilindrajeCa, numPasajerosDe,
				numPuertasDe, numBolsasAire, hp, aceleracion, transmisionCa, combustibleCa, estadoCa);
		boolean flag = concesionario.crearVehiculo(deportivo);
		return flag;
	}

	public boolean crearMoto(String marcaCa, String modeloCa, String cambiosCa, String velocidadMaxCa,
			String cilindrajeCa, TipoCombustible combustibleCa, TipoTransmision transmisionCa, Estado estadoCa) {

		Vehiculo moto = new Motos(marcaCa, modeloCa, cambiosCa, velocidadMaxCa, cilindrajeCa, transmisionCa, combustibleCa, estadoCa);
		boolean flag = concesionario.crearVehiculo(moto);
		return flag;
	}


	public boolean crearPick(String marca, String modelo, String cambios, String velocidadMax, String cilindraje,
			TipoCombustible combustible, TipoTransmision transmision, Estado estado, String numPasa, boolean absPic,
			boolean aire, boolean camRe, String bolsas, boolean cuatrox4, String capacidadCar, String numPuert) {

		Vehiculo pick = new Pickups(marca, modelo, cambios, velocidadMax, cilindraje, numPasa, numPuert,
				aire, camRe, bolsas, absPic, cuatrox4, capacidadCar, transmision, combustible, estado);
		boolean flag = concesionario.crearVehiculo(pick);
		return flag;
	}

	public boolean crearSedan(String marca, String modelo, String cambios, String velocidadMax, String cilindraje,
			TipoCombustible combustible, TipoTransmision transmision, Estado estado, String numPasaSe,
			String numPuertSe, String capacidadMaleteroSe, String numBolsasAireSe, boolean aireSe, boolean camSe, boolean velocidadCrucer, boolean absSe, boolean sensorColi, boolean sensorTrafi, boolean asisCarril) {

		Vehiculo sedan = new Sedan(marca, modelo, cambios, velocidadMax, cilindraje, numPasaSe, numPuertSe, capacidadMaleteroSe,
				aireSe, camSe, velocidadCrucer, numBolsasAireSe, absSe, sensorColi, sensorTrafi, asisCarril, transmision, combustible, estado);
		boolean flag = concesionario.crearVehiculo(sedan);
		return flag;
	}

	public boolean crearSuv(String marca, String modelo, String cambios, String velocidadMax, String cilindraje,
			TipoCombustible combustible, TipoTransmision transmision, Estado estado, String numPasaSv,
			String numPuertSv, String capacidadMaleteroSv, String numBolsasAireSv, boolean aireSv, boolean camSv,
			boolean velocidadCrucerSv, boolean absSv, boolean sensorColiSv, boolean sensorTrafiSv, boolean asisCarrilSv,
			boolean traccionSv, boolean isEnchufable, boolean isHibridoLigero, String tiempoCarga, String autonomia, String precio) {

		Vehiculo suv = new Vehiculo(marca, modelo, cambios, velocidadMax, cilindraje, capacidadMaleteroSv, numBolsasAireSv, velocidadCrucerSv,
				absSv, numPasaSv, numPuertSv, aireSv, camSv, null, null, false, null, null, null, false, isEnchufable, isHibridoLigero, tiempoCarga,
				autonomia, false, false, false, TipoVehiculo.SUV, null, transmision, combustible, estado, precio)
		boolean flag = concesionario.crearVehiculo(suv);
		return flag;
	}


	public boolean crearVan(String marca, String modelo, String cambios, String velocidadMax, String cilindraje,
			TipoCombustible combustible, TipoTransmision transmision, Estado estado, String numPasajerosVan,
			String numPuertasVan, String capMaleteroVan, boolean aireAcVan, boolean camVan, String numBolsasAireVan,
			boolean absVan, boolean isEnchufable, boolean isHibridoLigero, String tiempoCarga, String autonomia, String precio) {

		Vehiculo van = new Vehiculo(marca, modelo, cambios, velocidadMax, cilindraje, capMaleteroVan, numBolsasAireVan,
				false, absVan, numPasajerosVan,
				numPuertasVan, aireAcVan, camVan, null, null, false, null, null, null, false,
				isEnchufable, isHibridoLigero, tiempoCarga, autonomia, false, false, false, TipoVehiculo.VAN, null ,
				transmision, combustible, estado, precio);

		boolean flag = concesionario.crearVehiculo(van);
		return flag;
	}

	public boolean crearEmpleado(String name, String apellidos, String id) {
		Empleado empleado = new Empleado(name, apellidos, id);
		boolean flag = concesionario.crearEmpleado(empleado);
		return flag;
	}

	public List<Empleado> getListaEmpleados() {
		return concesionario.getListaEmpleados();
	}

	public boolean eliminarEmpleado(Empleado empleadoSeleccion) {
		boolean flag = concesionario.eliminarEmpleado(empleadoSeleccion);
		return flag;
	}

	public List<Vehiculo> getlistaVehiculos() {
		System.out.println(concesionario.getListaVehiculos());

		return concesionario.getListaVehiculos();

	}



}